Hello everyone,
Thank you for joining me today. I’m excited to introduce The Entitlement Schema for Relational Databases — a model designed to deliver granular, policy-driven access control for SQL environments.

The Challenge

In today’s data-driven world, protecting sensitive information is not optional — it’s essential.
Organizations face growing demands for:
	•	Row-level and column-level security,
	•	Regulatory compliance, and
	•	Transparency in how access rules are applied.

Traditional access control models often fall short.
They lack the fine-grained control, traceability, and governance needed in modern data ecosystems — especially when datasets are distributed across multiple databases for different business purposes.
In those scenarios, it’s critical that the same access control policies apply consistently to every copy of the data.

Our Solution

Our project directly addresses these challenges by introducing an AI-assisted Entitlement Schema — a unified model that secures data at both the row and column level through a policy-driven architecture.

At the core are policies, which represent access rules themselves:
	•	Row filter rules define which rows a user may see, based on schema, table, column, and value filters.
	•	Column mask rules determine how sensitive column values should be transformed or hidden before being displayed.

To simplify administration, policies are grouped into policy groups — representing personas, roles, or functions.
Users (or other subjects) are assigned to these groups through entitlements, ensuring each user automatically inherits the correct access privileges.

Model Transparency and Governance

A key strength of this schema is its explicit modeling of the underlying database structures — schemas, tables, and columns.
Every policy rule is traceable to the exact physical data it governs.
Relationships include not just rule linkage, but also annotations, status indicators, and effective dates — enabling both operational enforcement and audit readiness.

Key Benefits

This design delivers several critical advantages:
	1.	Row-level security – Filters data visibility per user or group.
	2.	Column-level security – Masks or redacts sensitive fields.
	3.	Policy grouping – Simplifies rule management and alignment to roles.
	4.	Traceability – Every rule is linked to its physical data structure.
	5.	Auditability & compliance – Lifecycle-aware relationships support governance and review.

In short: users see only the data they are entitled to — nothing more, nothing less.

Graph-Based Representation

To make the model both enforceable and intuitive, we represent the Entitlement Schema in Neo4j Graph form.
The graph structure brings semantics, reasoning, and visualization to the model.
	•	Nodes represent key entities — Policies, Policy Groups, Users, Schemas, Tables, and Columns.
	•	Relationships capture how they connect — for example:
	•	A Policy has row or column rules on Columns.
	•	A User is a member of a Policy Group.
	•	Tables belong to Schemas, and Columns belong to Tables.

This graph view makes the entire entitlement model explorable, explainable, and verifiable — improving both technical governance and business understanding.

Conclusion

In summary, the Entitlement Schema provides a granular, auditable, and flexible framework for enforcing data entitlements in relational databases.
Its graph-based design in Neo4j enhances governance, traceability, and compliance, while its SQL-level enforcement ensures operational strength.

By combining relational security enforcement with semantic graph intelligence, this project bridges the gap between operational security and enterprise data governance.

Thank you.
I look forward to showing you how this works in practice.