Hello, everyone.

Thank you for joining me today. I’m excited to introduce our project: The Entitlement Schema for Relational Databases—a model designed to bring granular, policy-driven access control to SQL environments.

⸻

Problem Context

In today’s data-driven world, protecting sensitive information is not optional—it’s essential. Organizations face increasing demands for row-level and column-level security, compliance with regulations, and transparency in how access rules are applied.
Traditional access control models often fall short because they lack fine-grained control, traceability, and governance capabilities.

⸻

Our Solution: Entitlement Schema

This project introduces an Entitlement Schema that secures data at both the row level and the column level through a policy-driven model.

At the core of the design are policies, which represent the access rules themselves:
	•	Row filter rules define which rows a subject may see, based on schema, table, column, and value filters.
	•	Column mask rules specify how sensitive column values should be transformed or hidden before being presented.

To simplify management, policies are grouped into policy groups, which represent higher-level personas or role sets.
Users—or other subjects—are then assigned to these groups via entitlements, ensuring that each person inherits the right access automatically.

⸻

Metadata Awareness

One of the key strengths of this schema is that it explicitly models the underlying database structure: schemas, tables, and columns.
This ensures every rule is traceable back to the exact physical data structure it governs. Relationships capture not only the link between policy and data but also include descriptive annotations, lifecycle status, and effective dates.
This makes enforcement both operationally strong and audit-ready.

⸻

Benefits

This design delivers several critical benefits:
	1.	Row-level security – filtering permissible rows per user or group.
	2.	Column-level security – masking or redacting sensitive fields.
	3.	Policy grouping – simplifying administration by aligning rules to personas.
	4.	Traceability – every rule is linked directly to the physical data it protects.
	5.	Auditability and compliance – explicit relationships and lifecycle status make the model governance-friendly.

Put simply: users see only the data they are entitled to, nothing more—nothing less.

⸻

Neo4j Graph Representation

To make this model not only enforceable but also intuitive to explore and govern, we also implemented the schema in a Neo4j graph database.
	•	Nodes represent key entities such as Policies, Policy Groups, Users, Schemas, Tables, and Columns.
	•	Relationships express how they connect—for example:
	•	A policy has row rules or column rules on columns.
	•	A user is a member of a policy group.
	•	Tables belong to schemas, and columns belong to tables.

This graph view brings semantics, reasoning, and visualization to the model, making it easier to validate, explain, and audit.

⸻

Closing

In summary, the Entitlement Schema provides a granular, auditable, and flexible model for enforcing data entitlements in relational databases—while its graph-based representation enhances governance, traceability, and compliance.

By combining SQL enforcement with Neo4j semantics, this project demonstrates how we can align operational security needs with enterprise data governance requirements.

Thank you. I look forward to showing you how this works in practice.