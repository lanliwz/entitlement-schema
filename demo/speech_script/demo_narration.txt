Entitlement Schema – Step-by-Step Walkthrough

Now that you’ve heard the introduction, let me show you how the Entitlement Schema works in practice.
We’ll start with the high-level graph structure in Neo4j, then drill down into specific policies, groups, and user entitlements.

Here are the building blocks of the model:
	•	Users are the people or subjects, in this demo, we have 3 users, Alic, Carol and Bob
	•	Policy Groups bundle access rules into personas, here we have Finance, HR, and IT groups.
	•	Policies define the actual rules. Here we have "HR Department Only" rule, this rule "Allow access only to rows where dept_name = 'HR'"
	we also have "Mask Salary" rule, which make sure that salaries are fully masked before being displayed.
	•	We tie those rules directly to columns, which belong to tables and schemas, so every entitlement is anchored to the physical database structure.


Here’s how entitlements are applied in practice.
Alice is a member of the HR Policy Group.
By following this link, we can trace exactly which policies apply to her, and which tables and columns they govern.

That’s traceability in action—from user, to policy group, to policy, to database structure.

Now let’s see enforcement in action.
Here’s Alice running a query on the Employee table:
SELECT emp_id, first_name, last_name, job_title, salary, dept_name
FROM employee;

For her:
	•	Only rows where dept_name = HR appear.
	•	The salary column is fully masked to 0.00.

If Bob, an IT user, runs the same query, he only sees rows for IT—and his view of salary is redacted differently.

This shows how row-level and column-level security combine seamlessly.

Beyond enforcement, governance is critical.
Each policy and relationship carries metadata—definitions, status flags, and effective dates.
This means compliance teams can query:
	•	Who has access to this column?
	•	When was this policy last certified?
	•	What’s the lifecycle status of this rule?

All of this is queryable directly from the graph.

So in summary:
	•	Policies define rules.
	•	Policy Groups organize them into personas.
	•	Users inherit access via group membership.
	•	Every rule is tied to the physical schema, making enforcement, traceability, and audit seamless.

With this design, we achieve granularity, compliance, and operational simplicity—all in one model.
